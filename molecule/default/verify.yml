---
- name: Verify
  hosts: clickhouse
  gather_facts: false
  become: true
  tasks:
    - name: Check ClickHouse service status
      command: systemctl status clickhouse-server
      args:
        warn: no
      register: service_status
      changed_when: no
      ignore_errors: yes

    - name: Verify ClickHouse is running
      assert:
        that:
          - "'Active: active (running)' in service_status.stdout"

    - name: Check ClickHouse client show database query
      command: clickhouse-client --query='SHOW DATABASES;'
      args:
        warn: no
      register: query_result
      changed_when: no

    - name: Verify ClickHouse client
      assert:
        that:
          - query_result.rc == 0
          - query_result.stdout|length > 0

    - name: Create database
      command: clickhouse-client --query "CREATE DATABASE IF NOT EXISTS verify_test"
      changed_when: no

    - name: Create table verify_test
      command: >
        clickhouse-client --query
        "CREATE TABLE IF NOT EXISTS verify_test.table_test(`id` UInt32, `City` String) ENGINE=TinyLog();"
      changed_when: no

    - name: Insert data into table, 1.
      command: clickhouse-client --query "INSERT INTO verify_test.table_test VALUES(11, 'Madrid');"
      changed_when: no

    - name: Insert data into table, 2.
      command: clickhouse-client --query "INSERT INTO verify_test.table_test VALUES(33, 'Leon');"
      changed_when: no

    - name: Delete verify_test database.
      command: clickhouse-client --query "DROP DATABASE verify_test;"
      changed_when: no

    - name: Create distributed database
      command: clickhouse-client --query "CREATE DATABASE IF NOT EXISTS distribute ON CLUSTER '{cluster}'"
      changed_when: no
      run_once: yes # to test distributed table

    - name: Create local events
      command: >
        clickhouse-client --query
        "CREATE TABLE IF NOT EXISTS distribute.local_events ON CLUSTER '{cluster}'
        (EventDate DateTime, CounterID UInt32, UserID UInt32)
        ENGINE = ReplicatedMergeTree('/clickhouse/{cluster}/distribute/tables/events/{shard}',
        '{replica}') PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID))"
      changed_when: no
      run_once: yes # to test distributed table

    - name: Create distributed events
      command: >
        clickhouse-client --query
        "CREATE TABLE IF NOT EXISTS distribute.events ON CLUSTER '{cluster}' AS distribute.local_events
        ENGINE = Distributed('{cluster}', 'distribute', 'local_events', rand())"
      changed_when: no
      run_once: yes # to test distributed table

    - name: Insert new distributed events
      command: >
        clickhouse-client --query
        "INSERT INTO distribute.events(EventDate, CounterID, UserID)
        VALUES (now(), 1, 10), (now(), 2, 20), (now(), 3, 15), (now(), 4, 25)"
      changed_when: no
      run_once: yes # to test distributed table

    - name: Select local_events
      command: >
       clickhouse-client --query
       "SELECT * FROM distribute.local_events FORMAT PrettyCompact"
      changed_when: no
      register: query_result

    - name: Print query local_events
      debug:
        msg: "{{ query_result.stdout_lines }}"

    - name: Select events
      command: >
       clickhouse-client --query
       "SELECT * FROM distribute.events FORMAT PrettyCompact"
      changed_when: no
      register: query_result

    - name: Print query events
      debug:
        msg: "{{ query_result.stdout_lines }}"

    - name: DELETE distributed database
      command: clickhouse-client --query "DROP DATABASE distribute ON CLUSTER '{cluster}'"
      changed_when: no
      run_once: yes # to test distributed table
